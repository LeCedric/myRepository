/**
 * generated by Xtext 2.9.2
 */
package com.tad.chart.xtext.chartDsl.impl;

import com.tad.chart.xtext.chartDsl.ChartDslPackage;
import com.tad.chart.xtext.chartDsl.Project;
import com.tad.chart.xtext.chartDsl.ProjectType;
import com.tad.chart.xtext.chartDsl.Task;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Project</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.tad.chart.xtext.chartDsl.impl.ProjectImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.tad.chart.xtext.chartDsl.impl.ProjectImpl#getProjectType <em>Project Type</em>}</li>
 *   <li>{@link com.tad.chart.xtext.chartDsl.impl.ProjectImpl#getTasks <em>Tasks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjectImpl extends MinimalEObjectImpl.Container implements Project
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getProjectType() <em>Project Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectType()
   * @generated
   * @ordered
   */
  protected static final ProjectType PROJECT_TYPE_EDEFAULT = ProjectType.DEVELOPMENT;

  /**
   * The cached value of the '{@link #getProjectType() <em>Project Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectType()
   * @generated
   * @ordered
   */
  protected ProjectType projectType = PROJECT_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTasks() <em>Tasks</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTasks()
   * @generated
   * @ordered
   */
  protected EList<Task> tasks;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ChartDslPackage.Literals.PROJECT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChartDslPackage.PROJECT__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectType getProjectType()
  {
    return projectType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectType(ProjectType newProjectType)
  {
    ProjectType oldProjectType = projectType;
    projectType = newProjectType == null ? PROJECT_TYPE_EDEFAULT : newProjectType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ChartDslPackage.PROJECT__PROJECT_TYPE, oldProjectType, projectType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Task> getTasks()
  {
    if (tasks == null)
    {
      tasks = new EObjectContainmentEList<Task>(Task.class, this, ChartDslPackage.PROJECT__TASKS);
    }
    return tasks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ChartDslPackage.PROJECT__TASKS:
        return ((InternalEList<?>)getTasks()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ChartDslPackage.PROJECT__NAME:
        return getName();
      case ChartDslPackage.PROJECT__PROJECT_TYPE:
        return getProjectType();
      case ChartDslPackage.PROJECT__TASKS:
        return getTasks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ChartDslPackage.PROJECT__NAME:
        setName((String)newValue);
        return;
      case ChartDslPackage.PROJECT__PROJECT_TYPE:
        setProjectType((ProjectType)newValue);
        return;
      case ChartDslPackage.PROJECT__TASKS:
        getTasks().clear();
        getTasks().addAll((Collection<? extends Task>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ChartDslPackage.PROJECT__NAME:
        setName(NAME_EDEFAULT);
        return;
      case ChartDslPackage.PROJECT__PROJECT_TYPE:
        setProjectType(PROJECT_TYPE_EDEFAULT);
        return;
      case ChartDslPackage.PROJECT__TASKS:
        getTasks().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ChartDslPackage.PROJECT__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case ChartDslPackage.PROJECT__PROJECT_TYPE:
        return projectType != PROJECT_TYPE_EDEFAULT;
      case ChartDslPackage.PROJECT__TASKS:
        return tasks != null && !tasks.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", projectType: ");
    result.append(projectType);
    result.append(')');
    return result.toString();
  }

} //ProjectImpl
