/*
 * generated by Xtext 2.9.2
 */
package com.tad.chart.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.tad.chart.xtext.ide.contentassist.antlr.internal.InternalChartDslParser;
import com.tad.chart.xtext.services.ChartDslGrammarAccess;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class ChartDslParser extends AbstractContentAssistParser {

	@Inject
	private ChartDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalChartDslParser createParser() {
		InternalChartDslParser result = new InternalChartDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProjectTypeAccess().getAlternatives(), "rule__ProjectType__Alternatives");
					put(grammarAccess.getCompanyAccess().getGroup(), "rule__Company__Group__0");
					put(grammarAccess.getEmployeeAccess().getGroup(), "rule__Employee__Group__0");
					put(grammarAccess.getEmployeeAccess().getGroup_2(), "rule__Employee__Group_2__0");
					put(grammarAccess.getEmployeeAccess().getGroup_3(), "rule__Employee__Group_3__0");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
					put(grammarAccess.getCompanyAccess().getNameAssignment_1(), "rule__Company__NameAssignment_1");
					put(grammarAccess.getCompanyAccess().getEmployeesAssignment_3(), "rule__Company__EmployeesAssignment_3");
					put(grammarAccess.getCompanyAccess().getProjectsAssignment_4(), "rule__Company__ProjectsAssignment_4");
					put(grammarAccess.getEmployeeAccess().getNameAssignment_1(), "rule__Employee__NameAssignment_1");
					put(grammarAccess.getProjectAccess().getNameAssignment_1(), "rule__Project__NameAssignment_1");
					put(grammarAccess.getProjectAccess().getProjectTypeAssignment_3(), "rule__Project__ProjectTypeAssignment_3");
					put(grammarAccess.getProjectAccess().getTasksAssignment_5(), "rule__Project__TasksAssignment_5");
					put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
					put(grammarAccess.getTaskAccess().getResponsableAssignment_3(), "rule__Task__ResponsableAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalChartDslParser typedParser = (InternalChartDslParser) parser;
			typedParser.entryRuleCompany();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ChartDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ChartDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
